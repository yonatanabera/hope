"use client";import{useFocusRing as Q}from"@react-aria/focus";import{useHover as Y}from"@react-aria/interactions";import y,{Fragment as G,createContext as C,useContext as R,useEffect as K,useMemo as A,useReducer as Z,useRef as W}from"react";import{useActivePress as ee}from'../../hooks/use-active-press.js';import{useEvent as P}from'../../hooks/use-event.js';import{useId as j}from'../../hooks/use-id.js';import{useResolveButtonType as te}from'../../hooks/use-resolve-button-type.js';import{optionalRef as ne,useSyncRefs as I}from'../../hooks/use-sync-refs.js';import{transitionDataAttributes as oe,useTransition as le}from'../../hooks/use-transition.js';import{CloseProvider as re}from'../../internal/close-provider.js';import{OpenClosedProvider as se,ResetOpenClosedProvider as ue,State as b,useOpenClosed as ie}from'../../internal/open-closed.js';import{isDisabledReactIssue7711 as ae}from'../../utils/bugs.js';import{match as x}from'../../utils/match.js';import{getOwnerDocument as pe}from'../../utils/owner.js';import{RenderFeatures as $,forwardRefWithAs as L,mergeProps as J,render as B,useMergeRefsFn as X}from'../../utils/render.js';import{startTransition as ce}from'../../utils/start-transition.js';import{Keys as g}from'../keyboard.js';var de=(l=>(l[l.Open=0]="Open",l[l.Closed=1]="Closed",l))(de||{}),Te=(n=>(n[n.ToggleDisclosure=0]="ToggleDisclosure",n[n.CloseDisclosure=1]="CloseDisclosure",n[n.SetButtonId=2]="SetButtonId",n[n.SetPanelId=3]="SetPanelId",n[n.SetButtonElement=4]="SetButtonElement",n[n.SetPanelElement=5]="SetPanelElement",n))(Te||{});let fe={[0]:e=>({...e,disclosureState:x(e.disclosureState,{[0]:1,[1]:0})}),[1]:e=>e.disclosureState===1?e:{...e,disclosureState:1},[2](e,t){return e.buttonId===t.buttonId?e:{...e,buttonId:t.buttonId}},[3](e,t){return e.panelId===t.panelId?e:{...e,panelId:t.panelId}},[4](e,t){return e.buttonElement===t.element?e:{...e,buttonElement:t.element}},[5](e,t){return e.panelElement===t.element?e:{...e,panelElement:t.element}}},v=C(null);v.displayName="DisclosureContext";function O(e){let t=R(v);if(t===null){let l=new Error(`<${e} /> is missing a parent <Disclosure /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(l,O),l}return t}let _=C(null);_.displayName="DisclosureAPIContext";function V(e){let t=R(_);if(t===null){let l=new Error(`<${e} /> is missing a parent <Disclosure /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(l,V),l}return t}let M=C(null);M.displayName="DisclosurePanelContext";function me(){return R(M)}function De(e,t){return x(t.type,fe,e,t)}let ye=G;function Pe(e,t){let{defaultOpen:l=!1,...p}=e,i=W(null),c=I(t,ne(a=>{i.current=a},e.as===void 0||e.as===G)),n=Z(De,{disclosureState:l?0:1,buttonElement:null,panelElement:null,buttonId:null,panelId:null}),[{disclosureState:o,buttonId:r},f]=n,s=P(a=>{f({type:1});let T=pe(i);if(!T||!r)return;let d=(()=>a?a instanceof HTMLElement?a:a.current instanceof HTMLElement?a.current:T.getElementById(r):T.getElementById(r))();d==null||d.focus()}),m=A(()=>({close:s}),[s]),D=A(()=>({open:o===0,close:s}),[o,s]),E={ref:c};return y.createElement(v.Provider,{value:n},y.createElement(_.Provider,{value:m},y.createElement(re,{value:s},y.createElement(se,{value:x(o,{[0]:b.Open,[1]:b.Closed})},B({ourProps:E,theirProps:p,slot:D,defaultTag:ye,name:"Disclosure"})))))}let Ee="button";function Se(e,t){let l=j(),{id:p=`headlessui-disclosure-button-${l}`,disabled:i=!1,autoFocus:c=!1,...n}=e,[o,r]=O("Disclosure.Button"),f=me(),s=f===null?!1:f===o.panelId,m=W(null),D=I(m,t,s?null:P(u=>r({type:4,element:u}))),E=X();K(()=>{if(!s)return r({type:2,buttonId:p}),()=>{r({type:2,buttonId:null})}},[p,r,s]);let a=P(u=>{var S;if(s){if(o.disclosureState===1)return;switch(u.key){case g.Space:case g.Enter:u.preventDefault(),u.stopPropagation(),r({type:0}),(S=o.buttonElement)==null||S.focus();break}}else switch(u.key){case g.Space:case g.Enter:u.preventDefault(),u.stopPropagation(),r({type:0});break}}),T=P(u=>{switch(u.key){case g.Space:u.preventDefault();break}}),d=P(u=>{var S;ae(u.currentTarget)||i||(s?(r({type:0}),(S=o.buttonElement)==null||S.focus()):r({type:0}))}),{isFocusVisible:F,focusProps:H}=Q({autoFocus:c}),{isHovered:h,hoverProps:U}=Y({isDisabled:i}),{pressed:N,pressProps:k}=ee({disabled:i}),q=A(()=>({open:o.disclosureState===0,hover:h,active:N,disabled:i,focus:F,autofocus:c}),[o,h,N,F,i,c]),w=te(e,o.buttonElement),z=s?J({ref:D,type:w,disabled:i||void 0,autoFocus:c,onKeyDown:a,onClick:d},H,U,k):J({ref:D,id:p,type:w,"aria-expanded":o.disclosureState===0,"aria-controls":o.panelElement?o.panelId:void 0,disabled:i||void 0,autoFocus:c,onKeyDown:a,onKeyUp:T,onClick:d},H,U,k);return B({mergeRefs:E,ourProps:z,theirProps:n,slot:q,defaultTag:Ee,name:"Disclosure.Button"})}let ge="div",Ae=$.RenderStrategy|$.Static;function be(e,t){let l=j(),{id:p=`headlessui-disclosure-panel-${l}`,transition:i=!1,...c}=e,[n,o]=O("Disclosure.Panel"),{close:r}=V("Disclosure.Panel"),f=X(),s=I(t,P(d=>{ce(()=>o({type:5,element:d}))}));K(()=>(o({type:3,panelId:p}),()=>{o({type:3,panelId:null})}),[p,o]);let m=ie(),[D,E]=le(i,n.panelElement,m!==null?(m&b.Open)===b.Open:n.disclosureState===0),a=A(()=>({open:n.disclosureState===0,close:r}),[n.disclosureState,r]),T={ref:s,id:p,...oe(E)};return y.createElement(ue,null,y.createElement(M.Provider,{value:n.panelId},B({mergeRefs:f,ourProps:T,theirProps:c,slot:a,defaultTag:ge,features:Ae,visible:D,name:"Disclosure.Panel"})))}let Ce=L(Pe),Re=L(Se),Ie=L(be),je=Object.assign(Ce,{Button:Re,Panel:Ie});export{je as Disclosure,Re as DisclosureButton,Ie as DisclosurePanel};
